/*************************************************************************
【文件名】 DistinctCollection.hpp
【功能模块和目的】 DistinctCollection 类定义了一个元素不重复的抽象容器。
【开发者及日期】 赵一彤 2024/7/24
*************************************************************************/

#ifndef DISTINCT_COLLECTION_HPP
#define DISTINCT_COLLECTION_HPP

#include <cstddef>
#include "CollectionBase.hpp"
using namespace std;

namespace C3w {

namespace Containers {

/*************************************************************************
【类名】 DistinctCollection
【功能】 定义一个元素类型为 T 且不可重复的抽象容器。
【接口说明】
    继承于 C3w::Containers::CollectionBase<T>:
        继承全部接口。
        重写 ShouldSet, ShouldAdd, ShouldInsert 使元素不可重复。
    静态函数：
        IsDistinct: 判断迭代器是否不含有重复元素。
    操作：
        IsEqualUnordered: 无序的相等性判断。
    操作符：
        operator==/!=: 同 IsEqualUnordered。
【开发者及日期】 赵一彤 2024/7/24
*************************************************************************/
template <typename T>
class DistinctCollection: public CollectionBase<T> {
    public:
        /**********************************************************************
        【函数名称】 IsDistinct
        【函数功能】 判断迭代器中是否无重复元素。
        【参数】 
            Begin: 头部迭代器。
            End: 尾部迭代器。
        【返回值】 
            是否没有重复元素。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        template <typename It>
        static bool IsDistinct(It Begin, It End);

        // 操作

        /**********************************************************************
        【函数名称】 IsEqualUnordered
        【函数功能】 判断自身与另一容器中元素是否一一对应。
        【参数】 
            Other: 另一个容器.
        【返回值】 
            元素是否一一对应。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool IsEqualUnordered(const DistinctCollection<T>& Other) const;
        /**********************************************************************
        【函数名称】 IsEqualUnordered
        【函数功能】 判断两个容器中元素是否一一对应。
        【参数】 
            Left: 第一个容器。
            Right: 第二个容器。
        【返回值】 
            元素是否一一对应。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        static bool IsEqualUnordered(
            const DistinctCollection<T>& Left,
            const DistinctCollection<T>& Right
        );

        // 操作符
        /**********************************************************************
        【函数名称】 operator==
        【函数功能】 判断自身与另一容器中元素是否一一对应。
        【参数】 
            Other: 另一个容器.
        【返回值】 
            元素是否一一对应。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool operator==(const DistinctCollection<T>& Other) const;
        /**********************************************************************
        【函数名称】 operator!=
        【函数功能】 判断两个容器中元素是否一一对应。
        【参数】 
            Left: 第一个容器。
            Right: 第二个容器。
        【返回值】 
            元素是否一一对应。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool operator!=(const DistinctCollection<T>& Other) const;
    protected:
        /**********************************************************************
        【函数名称】 ShouldSet
        【函数功能】 判断是否应该设置元素值。
        【参数】 
            Index: 要设置的下标。
            Value: 要设置的值。
        【返回值】 
            是否应该设置元素。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool ShouldSet(size_t Index, const T& Value) const override;
        /**********************************************************************
        【函数名称】 ShouldAdd
        【函数功能】 判断是否应该添加元素。
        【参数】 
            Value: 要添加的值。
        【返回值】 
            是否应该添加元素。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool ShouldAdd(const T& Value) const override;
        /**********************************************************************
        【函数名称】 ShouldInsert
        【函数功能】 判断是否应该插入元素。
        【参数】 
            Index: 要插入位置的下标。
            element: 新的元素。
        【返回值】 
            是否应该插入元素。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool ShouldInsert(size_t Index, const T& Value) const override;
};

}

}

#include "DistinctCollection.tpp"

#endif