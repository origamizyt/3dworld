/*************************************************************************
【文件名】 Point.hpp
【功能模块和目的】 Point 类定义了一个 N 维点。
【开发者及日期】 赵一彤 2024/7/24
*************************************************************************/

#ifndef POINT_HPP
#define POINT_HPP

#include <cstddef>
#include <string>
#include "Vector.hpp"
using namespace std;

namespace C3w {

/*************************************************************************
【类名】 Point
【功能】 定义一个维数为 N 的点。
【接口说明】 
    继承于 C3w::Vector<double, N>:
        继承全部接口。
        隐藏基类的向量独有的接口。
        重写 ToString。
    成员：
        ORIGIN: 原点。
        VOID: 分量全部为 NaN 的点，表示不存在的点，用于 Line<N>::Intersection 等。
    构造与析构：
        复用基类的构造函数。
        默认构造函数，初始化分量全部为 0 的点。
        接受一个向量的构造函数。
        拷贝构造函数。
    属性：
        Distance: 求相同维度点之间的距离。
        GeneralDistance: 求不同维度点之间的广义距离（升维）。
        IsVoid: 判断是否有分量为 NaN。
    操作：
        Project: 投影到更低维度。
        Promote: 填充到更高维度。
        Negate: 反转点。
        Add: 点和向量的加法。
        Subtract: 点和点、点和向量的减法。
    操作符：
        operator- (unary): 同 Negate。
        operator+: 同 Add。
        operator+=: 同基类 AddInplace。
        operator-: 同 Subtract。
        operator-=: 同基类 SubtractInplace。
        operator=: 默认赋值运算符。
【开发者及日期】 赵一彤 2024/7/24
*************************************************************************/
template <size_t N>
class Point: public Vector<double, N> {
    public:
        // 成员

        // 原点。
        static const Point<N> ORIGIN;
        // 分量全部为 NaN 的点。
        static const Point<N> VOID;

        // 构造函数

        // 使用基类构造函数
        using Vector<double, N>::Vector;
        // 如果没有此构造函数，g++ 可以通过，但 msvc 报错。
        /**********************************************************************
        【函数名称】 构造函数
        【函数功能】 初始化坐标全部为 0 的 Point 类的实例。
        【参数】 无
        【返回值】 无
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point() = default;
        /**********************************************************************
        【函数名称】 构造函数
        【函数功能】 通过 Vector 初始化 Point 类型实例。
        【参数】 
            AVector: 一个向量。
        【返回值】 无
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        explicit Point(const Vector<double, N>& AVector);
        /**********************************************************************
        【函数名称】 拷贝构造函数
        【函数功能】 使用另一 Point 初始化 Point 类的实例。
        【参数】
            Other: 另一 Point 实例。
        【返回值】 无
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point(const Point<N>& Other) = default;

        // 属性

        /**********************************************************************
        【函数名称】 Distance
        【函数功能】 求两个点之间的直线距离。
        【参数】 
            Left: 第一个点。
            Right: 第二个点。
        【返回值】
            两点之间的直线距离。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        static double Distance(const Point<N>& Left, const Point<N>& Right);
        /**********************************************************************
        【函数名称】 Distance
        【函数功能】 求自身与另一点之间的直线距离。
        【参数】 
            Other: 另一个点。
        【返回值】
            两点之间的直线距离。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        double Distance(const Point<N>& Other) const;
        /**********************************************************************
        【函数名称】 GeneralDistance
        【函数功能】 求两个点之间的广义直线距离。
        【参数】 
            Left: 第一个点。
            Right: 第二个点。
        【返回值】
            两点之间的直线距离。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        template <size_t M>
        static double GeneralDistance(
            const Point<N>& Left, 
            const Point<M>& Right
        );
        /**********************************************************************
        【函数名称】 GeneralDistance
        【函数功能】 求自身与另一点之间的广义直线距离。
        【参数】 
            Other: 另一个点。
        【返回值】
            两点之间的直线距离。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        template <size_t M>
        double GeneralDistance(const Point<M>& Other) const;

        // 操作

        /**********************************************************************
        【函数名称】 IsVoid
        【函数功能】 判断自身是否有分量为 NaN。
        【参数】 无
        【返回值】
            自身是否含有 NaN 分量。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        bool IsVoid() const;
        /**********************************************************************
        【函数名称】 Project
        【函数功能】 将自身从 N 维投影至更低的 M 维。
        【参数】 无
        【返回值】
            一个 M 维的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        template <size_t M>
        Point<M> Project() const;
        /**********************************************************************
        【函数名称】 Promote
        【函数功能】 将自身从 N 维升至更高的 M 维。
        【参数】 
            Padder: 可选，填充于高维坐标的数，默认 0。
        【返回值】
            一个 M 维的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        template <size_t M>
        Point<M> Promote(double Padder = 0) const;
        /**********************************************************************
        【函数名称】 Negate
        【函数功能】 反转此点并存为新的点。
        【参数】 无
        【返回值】 
            反转后的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N> Negate() const;
        /**********************************************************************
        【函数名称】 Negate
        【函数功能】 反转给定点并存为新的点。
        【参数】 
            APoint: 要反转的点。
        【返回值】 
            反转后的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        static Point<N> Negate(const Point<N>& APoint);
        /**********************************************************************
        【函数名称】 Add
        【函数功能】 将自身与一向量相加并存储为新的点。
        【参数】 
            Delta: 相加的向量。
        【返回值】 
            点与向量相加形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N> Add(const Vector<double, N>& Delta) const;
        /**********************************************************************
        【函数名称】 Add
        【函数功能】 将点与一向量相加并存储为新的点。
        【参数】 
            APoint: 相加的点
            Delta: 相加的向量。
        【返回值】 
            点与向量相加形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        static Point<N> Add(
            const Point<N>& APoint, 
            const Vector<double, N>& Delta
        );
        /**********************************************************************
        【函数名称】 Subtract
        【函数功能】 将自身与一向量相减并存储为新的点。
        【参数】 
            Delta: 相减的向量。
        【返回值】 
            点与向量相减形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N> Subtract(const Vector<double, N>& Delta) const;
        /**********************************************************************
        【函数名称】 Subtract
        【函数功能】 将自身与另一点相减并存储为向量。
        【参数】 
            Other: 相减的点。
        【返回值】 
            点与点相减形成的向量。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Vector<double, N> Subtract(const Point<N>& Other) const;
        /**********************************************************************
        【函数名称】 Subtract
        【函数功能】 将点与一向量相减并存储为新的点。
        【参数】 
            APoint: 相减的点
            Delta: 相减的向量。
        【返回值】 
            点与向量相减形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        static Point<N> Subtract(
            const Point<N>& APoint,
            const Vector<double, N>& Delta
        );
        /**********************************************************************
        【函数名称】 Subtract
        【函数功能】 将两点点相减并存储为向量。
        【参数】 
            Left: 第一个点。
            Right: 第二个点。
        【返回值】 
            点与点相减形成的向量。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        static Vector<double, N> Subtract(
            const Point<N>& Left,
            const Point<N>& Right
        );

        // 操作符
        
        /**********************************************************************
        【函数名称】 operator-
        【函数功能】 反转此点并存为新的点。
        【参数】 无
        【返回值】 
            反转后的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N> operator-() const;
        /**********************************************************************
        【函数名称】 operator+
        【函数功能】 将自身与一向量相加并存储为新的点。
        【参数】 
            Delta: 相加的向量。
        【返回值】 
            点与向量相加形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N> operator+(const Vector<double, N>& Delta) const;
        /**********************************************************************
        【函数名称】 operator+=
        【函数功能】 将自身与一向量相加。
        【参数】 
            Delta: 相加的向量。
        【返回值】 
            自身的引用。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N>& operator+=(const Vector<double, N>& Delta);
        /**********************************************************************
        【函数名称】 operator-
        【函数功能】 将自身与一向量相减并存储为新的点。
        【参数】 
            Delta: 相减的向量。
        【返回值】 
            点与向量相减形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N> operator-(const Vector<double, N>& Delta) const;
        /**********************************************************************
        【函数名称】 operator-
        【函数功能】 将自身与另一点相减并存储为向量。
        【参数】 
            Other: 相减的点。
        【返回值】 
            点与点相减形成的向量。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Vector<double, N> operator-(const Point<N>& Other) const;
        /**********************************************************************
        【函数名称】 operator-=
        【函数功能】 将自身与一向量相减并存储为新的点。
        【参数】 
            Delta: 相减的向量。
        【返回值】 
            点与向量相减形成的新的点。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N>& operator-=(const Vector<double, N>& Delta);
        /**********************************************************************
        【函数名称】 operator=
        【函数功能】 将另一点赋值于自身。
        【参数】 
            Other: 要从之取值的点。
        【返回值】 
            自身的引用。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        Point<N>& operator=(const Point<N>& Other) = default;

        // 格式化
        
        /**********************************************************************
        【函数名称】 ToString
        【函数功能】 返回此对象的字符串表达形式。
        【参数】 无
        【返回值】 
            此对象的字符串表达形式。
        【开发者及日期】 赵一彤 2024/7/24
        **********************************************************************/
        string ToString() const override;

        // 继承基类的函数：
        // GetComponent
        // SetComponent
        // SetAllComponents
        // NegateInplace
        // AddInplace
        // SubtractInplace
        // operator[]
        // operator==
        // operator!=

    private:
        // 隐藏向量独有的函数
        using Vector<double, N>::IsParallel;
        using Vector<double, N>::IsPerpendicular;
        using Vector<double, N>::MultiplyInplace;
        using Vector<double, N>::Multiply;
        using Vector<double, N>::InnerProduct;
        using Vector<double, N>::operator*;
        using Vector<double, N>::operator*=;
        using Vector<double, N>::Module;
        using Vector<double, N>::ZERO;
};

}

#include "Point.tpp"

#endif